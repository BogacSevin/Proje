{"remainingRequest":"/Users/cihazbir/deneme/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/cihazbir/deneme/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/cihazbir/deneme/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cihazbir/deneme/src/components/Profil.vue?vue&type=template&id=ab833328&","dependencies":[{"path":"/Users/cihazbir/deneme/src/components/Profil.vue","mtime":1655470452678},{"path":"/Users/cihazbir/deneme/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cihazbir/deneme/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cihazbir/deneme/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cihazbir/deneme/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}